import nlvm.math3d.*;

public class TrackLightCommand {	
	
    // No Op Info
    public bool noop = false;

    // Delay info
    public bool isDelay;
    public float delayTime;

    // Light info
    public int lightStart;
    public int lightEnd;
    public int lightStep;
    public Vector3f color;
	
    private TrackLightManager tlm;
    private TrackLightSequence tls;

    public TrackLightCommand(String commandString, TrackLightManager trackLightManager, TrackLightSequence trackLightSequence) {

        tlm = trackLightManager;
        tls = trackLightSequence;
        processCommandString(commandString);

    }

    // SET 0-10-1 255 255 255
    // DELAY 15

    private bool processCommandString(String commandString) {

        String[] arguments = split(commandString, ' ');

        // Parse empty lines and comments
        if (arguments[0].length() == 0 || (arguments[0].length() > 0 && arguments[0].charAt(0) == '#')) {
            noop = true;
        }

        if (arguments[0].equals("CLEAR")) {
            lightStart = 0;
            lightEnd = processInt("MAX");
            lightStep = 1;
            color = new Vector3f(0,0,0);
        }

        if (arguments[0].equals("ALL")) {
            lightStart = 0;
            lightEnd = processInt("MAX");
            lightStep = 1;

            color = new Vector3f( ((float)(Integer.parseInt(arguments[1])) / 255.0f), ((float)(Integer.parseInt(arguments[2])) / 255.0f), ((float)(Integer.parseInt(arguments[3])) / 255.0f));

        }

        if (arguments[0].equals("SET")) {

            String[] lightRange = split(arguments[1], '-');

            if (lightRange.length == 1) {
                lightStart = processInt(lightRange[0]);
                lightEnd = lightStart;
                lightStep = 1;
            }
            else if (lightRange.length == 2){
                lightStart = processInt(lightRange[0]);
                lightEnd = processInt(lightRange[1]);
                lightStep = 1;
            }
            else {
                lightStart = processInt(lightRange[0]);
                lightEnd = processInt(lightRange[1]);
                lightStep = processInt(lightRange[2]);
            }

            color = new Vector3f( ((float)(Integer.parseInt(arguments[2])) / 255.0f), ((float)(Integer.parseInt(arguments[3])) / 255.0f), ((float)(Integer.parseInt(arguments[4])) / 255.0f));

        }

        if (arguments[0].equals("DELAY")) {
            isDelay = true;
            delayTime = (float) (Integer.parseInt(arguments[1])) / 1000.0f;
        }

        return true;

    }

    private int processInt(String string) {
        if (string.equals("MAX")) {
            return tlm.trackLightCount;
        }
        return Integer.parseInt(string);
    }

    public String[] split(String s, char splitChar) {

        int charCount = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == splitChar) charCount++;
        }

        String[] result = new String[charCount + 1];

        int index = 0;
        String buffer = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == splitChar) {
                result[index] = buffer;
                index++;
                buffer = "";
            }
            else {
                buffer = buffer + s.charAt(i);
            }
        }
        result[index] = buffer;

        return result;

    }

    public void execute() {

        if (noop) return;

        if (isDelay) {
            tls.delayTime = delayTime;
        }
        else {
            for (int i = lightStart; i < lightEnd; i+=lightStep) {
                tlm.getTrackLightAt(i).setLight(0, color);
            }
        }

    }

}