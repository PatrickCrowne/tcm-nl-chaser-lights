import nlvm.math3d.*;

public class TrackLightCommand {	
	
    public static final String OP_NOP = "NOP";
    public static final String OP_SET = "SET";
    public static final String OP_CLEAR = "CLEAR";
    public static final String OP_DELAY = "DELAY";
    public static final String OP_JUMP = "JUMP";
    public static final String OP_RET = "RETURN";
    public static final String OP_SUB = "DEF";

    public static final String KW_ALL = "ALL";
    public static final String KW_MAX = "MAX";
    public static final String KW_MAIN = "MAIN";

    
    public String commandName;

    public int lightStart;
    public int lightEnd;
    public int lightStep;

    public Vector3f color;
	
    public float delayTime;
    public int jumpLocation;

    private TrackLightManager tlm;
    private TrackLightSequence tls;

    public TrackLightCommand(String commandString, TrackLightManager trackLightManager, TrackLightSequence trackLightSequence) {

        tlm = trackLightManager;
        tls = trackLightSequence;
        processCommandString(commandString);

    }

    // SET 0-10-1 255 255 255
    // DELAY 15

    private bool processCommandString(String commandString) {

        System.out.println(commandString);

        String[] arguments = split(commandString, ' ');

        commandName = arguments[0];

        // Parse empty lines and comments
        if (commandName.equals(OP_NOP) || commandName.equals(OP_SUB) || commandName.length() == 0 || (commandName.length() > 0 && commandName.charAt(0) == '#')) {
            commandName = OP_NOP;
        }

        // CLEAR A-B-C
        if (commandName.equals(OP_CLEAR)) {
            parseLightRange(arguments[1]);
            color = new Vector3f(0,0,0);
        }

        // SET A-B-C R G B
        if (commandName.equals(OP_SET)) {
            parseLightRange(arguments[1]);
            parseColor(arguments[2], arguments[3], arguments[4]);
        }

        if (commandName.equals(OP_JUMP)) {
            parseSubroutine(arguments[1]);
        }

        // DELAY (MS)
        if (commandName.equals(OP_DELAY)) {
            delayTime = (float) (Integer.parseInt(arguments[1])) / 1000.0f;
        }

        return true;

    }

    private void parseSubroutine(String string) {

        int index = tls.getSubroutineIndex(string);

        if (index < 0) {
            System.err.println("UNKNOWN SUBROUTINE \"" + string + "\"");
            return;
        }

        jumpLocation = index;

    }

    private void parseLightRange(String string) {

        if (string.equals(KW_ALL)) {
            lightStart = 0;
            lightEnd = parseInteger(KW_MAX);
            lightStep = 1;
            return;
        }

        String[] lightRange = split(string, '-');

        if (lightRange.length == 1) {
            lightStart = parseInteger(lightRange[0]);
            lightEnd = lightStart;
            lightStep = 1;
        }
        else if (lightRange.length == 2){
            lightStart = parseInteger(lightRange[0]);
            lightEnd = parseInteger(lightRange[1]);
            lightStep = 1;
        }
        else {
            lightStart = parseInteger(lightRange[0]);
            lightEnd = parseInteger(lightRange[1]);
            lightStep = parseInteger(lightRange[2]);
        }

    }

    private void parseColor(String arg0, String arg1, String arg2) {

        color = new Vector3f( ((float)(Integer.parseInt(arg0)) / 255.0f), ((float)(Integer.parseInt(arg1)) / 255.0f), ((float)(Integer.parseInt(arg2)) / 255.0f));

    }

    private int parseInteger(String string) {
        if (string.equals(KW_MAX)) {
            return tlm.trackLightCount;
        }
        return Integer.parseInt(string);
    }

    public String[] split(String s, char splitChar) {

        int charCount = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == splitChar) charCount++;
        }

        String[] result = new String[charCount + 1];

        int index = 0;
        String buffer = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == splitChar) {
                result[index] = buffer;
                index++;
                buffer = "";
            }
            else {
                buffer = buffer + s.charAt(i);
            }
        }
        result[index] = buffer;

        return result;

    }

    public void execute() {

        if (commandName.equals(OP_NOP)) {
            return;
        }
        else if (commandName.equals(OP_DELAY)) {
            tls.delayTime = delayTime;
            return;
        }
        else if (commandName.equals(OP_JUMP)) {
            tls.push(tls.commandIndex);
            tls.commandIndex = jumpLocation;
            return;
        }
        else if (commandName.equals(OP_RET)) {
            tls.commandIndex = tls.pop();
            return;
        }
        // SET, CLEAR
        else {
            for (int i = lightStart; i < lightEnd; i+=lightStep) {
                tlm.getTrackLightAt(i).setLight(0, color);
            }
        }

    }

}